// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: songs.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSong = `-- name: CreateSong :one
INSERT INTO "songs" ("id", "title", "year", "genre", "performer", "duration", "album_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title, year, genre, performer, duration, album_id, created_at
`

type CreateSongParams struct {
	ID        string
	Title     string
	Year      int16
	Genre     string
	Performer string
	Duration  int16
	AlbumID   pgtype.Text
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, createSong,
		arg.ID,
		arg.Title,
		arg.Year,
		arg.Genre,
		arg.Performer,
		arg.Duration,
		arg.AlbumID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.Performer,
		&i.Duration,
		&i.AlbumID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM "songs" WHERE "id" = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSong, id)
	return err
}

const getSongByAlbumID = `-- name: GetSongByAlbumID :many
SELECT id, title, year, genre, performer, duration, album_id, created_at FROM "songs" WHERE "album_id" = $1
`

func (q *Queries) GetSongByAlbumID(ctx context.Context, albumID pgtype.Text) ([]Song, error) {
	rows, err := q.db.Query(ctx, getSongByAlbumID, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Year,
			&i.Genre,
			&i.Performer,
			&i.Duration,
			&i.AlbumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongByID = `-- name: GetSongByID :one
SELECT id, title, year, genre, performer, duration, album_id, created_at FROM "songs" WHERE "id" = $1
`

func (q *Queries) GetSongByID(ctx context.Context, id string) (Song, error) {
	row := q.db.QueryRow(ctx, getSongByID, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.Performer,
		&i.Duration,
		&i.AlbumID,
		&i.CreatedAt,
	)
	return i, err
}

const getSongs = `-- name: GetSongs :many
SELECT id, title, year, genre, performer, duration, album_id, created_at FROM "songs"
`

func (q *Queries) GetSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.Query(ctx, getSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Year,
			&i.Genre,
			&i.Performer,
			&i.Duration,
			&i.AlbumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :one
UPDATE "songs" SET "title" = $1, "year" = $2, "genre" = $3, "performer" = $4, "duration" = $5, "album_id" = $6 WHERE "id" = $7 RETURNING id, title, year, genre, performer, duration, album_id, created_at
`

type UpdateSongParams struct {
	Title     string
	Year      int16
	Genre     string
	Performer string
	Duration  int16
	AlbumID   pgtype.Text
	ID        string
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, updateSong,
		arg.Title,
		arg.Year,
		arg.Genre,
		arg.Performer,
		arg.Duration,
		arg.AlbumID,
		arg.ID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.Performer,
		&i.Duration,
		&i.AlbumID,
		&i.CreatedAt,
	)
	return i, err
}
