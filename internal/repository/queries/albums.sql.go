// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: albums.sql

package queries

import (
	"context"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO "albums" ("id", "name", "year") VALUES ($1, $2, $3) RETURNING id, name, year
`

type CreateAlbumParams struct {
	ID   string
	Name string
	Year int16
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum, arg.ID, arg.Name, arg.Year)
	var i Album
	err := row.Scan(&i.ID, &i.Name, &i.Year)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM "albums" WHERE "id" = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAlbum, id)
	return err
}

const getAlbumByID = `-- name: GetAlbumByID :one
SELECT id, name, year FROM "albums" WHERE "id" = $1
`

func (q *Queries) GetAlbumByID(ctx context.Context, id string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumByID, id)
	var i Album
	err := row.Scan(&i.ID, &i.Name, &i.Year)
	return i, err
}

const getAlbums = `-- name: GetAlbums :many
SELECT id, name, year FROM "albums"
`

func (q *Queries) GetAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.Query(ctx, getAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(&i.ID, &i.Name, &i.Year); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :one
UPDATE "albums" SET "name" = $1, "year" = $2 WHERE "id" = $3 RETURNING id, name, year
`

type UpdateAlbumParams struct {
	Name string
	Year int16
	ID   string
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, updateAlbum, arg.Name, arg.Year, arg.ID)
	var i Album
	err := row.Scan(&i.ID, &i.Name, &i.Year)
	return i, err
}
